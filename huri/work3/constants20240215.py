import numpy as np

# PARAMETERS
# ---------------------
# PURPLE RING CAO TYPE: 1
# BLUE CAP TYPE : 2
# WHITE CAP TYPE: 3


######## VISION SYSTEM ########
# Calibration Matrix
# TCP2EYE_MAT_DEVICE_1 = np.array([[9.76124539e-05, 9.99488058e-01, 3.19937109e-02,
#                                   -2.61419847e-02],
#                                  [-9.99821215e-01, -5.07397978e-04, 1.89016844e-02,
#                                   7.67924853e-03],
#                                  [1.89082400e-02, -3.19898400e-02, 9.99309330e-01,
#                                   -7.52292807e-02],
#                                  [0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
#                                   1.00000000e+00]])

# TCP2EYE_MAT_DEVICE_1 = np.array([[9.76124539e-05, 9.99488058e-01, 3.19937109e-02,
#                                   -2.88847247e-02],
#                                  [-9.99821215e-01, -5.07397978e-04, 1.89016844e-02,
#                                   4.84277460e-03],
#                                  [1.89082400e-02, -3.19898400e-02, 9.99309330e-01,
#                                   -7.65086780e-02],
#                                  [0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
#                                   1.00000000e+00]])
#
# TCP2EYE_MAT_DEVICE_2 = np.array([[0.02390738, -0.99949151, -0.02109886, 0.02704657],
#                                  [0.99960278, 0.02421448, -0.0144207, -0.01188108],
#                                  [0.01492425, -0.02074572, 0.99967339, -0.07422972],
#                                  [0., 0., 0., 1.]])


EYE2TOEYE1 = np.array([[-0.99914642, 0.02314666, 0.03421461, 0.01411182],
                       [-0.0244121, -0.99901544, -0.03704311, 0.05264735],
                       [0.03332348, -0.03784675, 0.99872778, -0.00120849],
                       [0., 0., 0., 1.]])

TCP2EYE_MAT_DEVICE_2 = np.array([[-0.00288267, -0.99862597, -0.05232454, 0.03025802],
                                 [0.99998839, -0.00308074, 0.00370578, -0.00710887],
                                 [-0.0038619, -0.05231325, 0.99862326, -0.0748592],
                                 [0., 0., 0., 1.]])

np.array([[-6.47071227e-04, -9.99417152e-01, -3.41311763e-02,
           2.55589388e-02],
          [9.99962000e-01, -9.43391840e-04, 8.66720846e-03,
           -1.31691894e-02],
          [-8.69437000e-03, -3.41242700e-02, 9.99379780e-01,
           -7.58774952e-02],
          [0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
           1.00000000e+00]])

np.array([[0.02413191, -0.99969154, -0.00587111, 0.02339875],
          [0.99960278, 0.02421448, -0.0144207, -0.0105557],
          [0.0145584, -0.00552078, 0.99987878, -0.07521513],
          [0., 0., 0., 1.]])

TCP2EYE_MAT_DEVICE_1 = np.dot(TCP2EYE_MAT_DEVICE_2, EYE2TOEYE1)
print(repr(TCP2EYE_MAT_DEVICE_1))

TCP2EYE_MAT_DEVICE_1 = np.array([[0.00268845596187908, 0.9998913680609892, -0.01449162467599675, -0.02229444],
                                 [-0.9992583078984777, 0.003242858813549866, 0.03837046466596635, 0.006836110000000001],
                                 [0.03841328, 0.01437771, 0.9991585, -0.07887468],
                                 [0.0, 0.0, 0.0, 1.0]])


def eye2TOeye1():
    return np.dot(np.linalg.inv(TCP2EYE_MAT_DEVICE_2), TCP2EYE_MAT_DEVICE_1)


# Test Tube Rack Detection
# Rack Height filter
# HEIGHT_RANGE = (.030, 0.045)
offset = -.02 - .025
HEIGHT_RANGE = (.057 + offset, 0.072 + offset)
OBS_HEIGHT = .14 - .03

######## Task PLANNING SYSTEM ########
GOAL_PATTERN = np.array([[1, 1, 0, 0, 2, 2, 0, 0, 3, 3, ],
                         [1, 1, 0, 0, 2, 2, 0, 0, 3, 3, ],
                         [1, 1, 0, 0, 2, 2, 0, 0, 3, 3, ],
                         [1, 1, 0, 0, 2, 2, 0, 0, 3, 3, ],
                         [1, 1, 0, 0, 2, 2, 0, 0, 3, 3, ]])
GOAL_PATTERN1 = np.array([[1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
                          [1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
                          [1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
                          [1, 1, 1, 2, 2, 2, 2, 3, 3, 3],
                          [1, 1, 1, 2, 2, 2, 2, 3, 3, 3]])
GOAL_PATTERN2 = np.array([[3, 3, 3, 2, 2, 2, 2, 1, 1, 1, ],
                          [3, 3, 3, 2, 2, 2, 2, 1, 1, 1, ],
                          [3, 3, 3, 2, 2, 2, 2, 1, 1, 1, ],
                          [3, 3, 3, 2, 2, 2, 2, 1, 1, 1, ],
                          [3, 3, 3, 2, 2, 2, 2, 1, 1, 1, ]])
######## MOTION PLANNING SYSTEM ########
# Goal pose
GOAL_UP_DISTANCE = {1: .045,
                    2: .05,
                    3: .045, }

# Approach Distance
APPROACH_DISTANCE_LIST = {
    1: [.03, .069],
    2: [.06, .07],
    3: [.03, .069],
}

# Depart distance
DEPART_DISTANCE_LIST = [.15, .03]

######## Robot Motion ########
SPEED = 2000
ACC = 3500

########## OBS SLOT ################
OBS_SLOT_1 = (1, 0)
OBS_SLOT_2 = (1, 9)

#### DEBUG ####
TOGGLE_RACK_LOCATOR = False
TOGGLE_YOLO = False
